// Code generated by mockery v2.14.0. DO NOT EDIT.

package usecase

import (
	contracts "musement/src/internal/core/contracts"

	mock "github.com/stretchr/testify/mock"

	models "musement/src/internal/core/domain/entities"
)

// MockForecastedCitiesFormatter is an autogenerated mock type for the forecastedCitiesFormatter type
type MockForecastedCitiesFormatter struct {
	mock.Mock
}

// BuildForecastedCity provides a mock function with given fields: city, weatherForecast
func (_m *MockForecastedCitiesFormatter) BuildForecastedCity(city contracts.City, weatherForecast contracts.WeatherForecast) models.CityForecasted {
	ret := _m.Called(city, weatherForecast)

	var r0 models.CityForecasted
	if rf, ok := ret.Get(0).(func(contracts.City, contracts.WeatherForecast) models.CityForecasted); ok {
		r0 = rf(city, weatherForecast)
	} else {
		r0 = ret.Get(0).(models.CityForecasted)
	}

	return r0
}

type mockConstructorTestingTNewMockForecastedCitiesFormatter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockForecastedCitiesFormatter creates a new instance of MockForecastedCitiesFormatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockForecastedCitiesFormatter(t mockConstructorTestingTNewMockForecastedCitiesFormatter) *MockForecastedCitiesFormatter {
	mock := &MockForecastedCitiesFormatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
