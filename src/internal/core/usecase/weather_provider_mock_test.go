// Code generated by mockery v2.14.0. DO NOT EDIT.

package usecase

import (
	contracts "musement/src/internal/core/contracts"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherProvider is an autogenerated mock type for the WeatherProvider type
type MockWeatherProvider struct {
	mock.Mock
}

// GetForecastForCity provides a mock function with given fields: cityLat, cityLong
func (_m *MockWeatherProvider) GetForecastForCity(cityLat float64, cityLong float64) (contracts.WeatherForecast, error) {
	ret := _m.Called(cityLat, cityLong)

	var r0 contracts.WeatherForecast
	if rf, ok := ret.Get(0).(func(float64, float64) contracts.WeatherForecast); ok {
		r0 = rf(cityLat, cityLong)
	} else {
		r0 = ret.Get(0).(contracts.WeatherForecast)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(cityLat, cityLong)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockWeatherProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWeatherProvider creates a new instance of MockWeatherProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWeatherProvider(t mockConstructorTestingTNewMockWeatherProvider) *MockWeatherProvider {
	mock := &MockWeatherProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
