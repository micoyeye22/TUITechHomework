// Code generated by mockery v2.14.0. DO NOT EDIT.

package getforecast

import (
	models "musement/src/internal/core/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockGetForecastForCitiesUseCase is an autogenerated mock type for the GetForecastForCitiesUseCase type
type MockGetForecastForCitiesUseCase struct {
	mock.Mock
}

// GetForecastForCities provides a mock function with given fields:
func (_m *MockGetForecastForCitiesUseCase) GetForecastForCities() ([]models.CityForecasted, error) {
	ret := _m.Called()

	var r0 []models.CityForecasted
	if rf, ok := ret.Get(0).(func() []models.CityForecasted); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CityForecasted)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockGetForecastForCitiesUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGetForecastForCitiesUseCase creates a new instance of MockGetForecastForCitiesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGetForecastForCitiesUseCase(t mockConstructorTestingTNewMockGetForecastForCitiesUseCase) *MockGetForecastForCitiesUseCase {
	mock := &MockGetForecastForCitiesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
