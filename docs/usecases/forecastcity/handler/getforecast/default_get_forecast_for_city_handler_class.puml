@startuml

interface GetForecastForCityHandler {
    GetForecastForCity(ctx:*gin.Context) : error
}

package "src.internal.infrastructure.entrypoints.api.getforecastforcity" {
    class DefaultGetForecastForCityHandler implements GetForecastForCityHandler {
        - mapper:cityForecastedMapper
        - getForecastForCityUseCase:ForecastCityUseCase
        ---
        + {static} NewDefaultGetForecastForCityHandler(getForecastForCityUseCase:GetForecastForCityHandler) : *DefaultGetForecastForCityHandler
        + GetForecastForCity(ctx:*gin.Context) : error
    }

    -interface cityForecastedMapper {
        ToCityForecastResponse(cityForecasted:entities.CityForecasted) : responsemodel.CityForecasted
    }

    interface ForecastCityUseCase {
        GetForecastedCity(cityName:string, date:string) : (entities.CityForecasted, error)
    }

    package "internal" {
        package "mappers" {
            -class defaultCityForecastedMapper implements cityForecastedMapper {
                ---
                + {static} NewDefaultCityForecastedMapper() : *defaultCityForecastedMapper
                + ToCityForecastResponse(cityForecasted:entities.CityForecasted) : responsemodel.CityForecasted
            }
        }

        package "responsemodel" {
            class CityForecasted {
                + Name:string `json:"name"`
                + Forecasts:[]Forecast `json:"forecasts"`
            }

            class Forecast {
                + Date:Date `json:"date"`
                + Condition:string `json:"condition"`
            }
        }
    }
}

DefaultGetForecastForCityHandler - ForecastCityUseCase
DefaultGetForecastForCityHandler -- cityForecastedMapper
defaultCityForecastedMapper . CityForecasted
CityForecasted -- Forecast

@enduml
